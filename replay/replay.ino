/*
 *  Project     FastLED NeoPixel Library
 *  @author     David Madison
 *  @link       github.com/dmadison/FastLED_NeoPixel
 *  @license    MIT - Copyright (c) 2021 David Madison
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

 /**
 * @file    Strandtest.ino
 * @brief   A basic strip test program.
 * @example Strandtest.ino
 * @brief   A basic strip test program.
 * 
 * @details This partially mirrors the behavior of the Adafruit NeoPixel
 * "strandtest" example. Due to licensing issues that example cannot be
 * included in this library, but I recommend trying to modify it yourself with
 * the FastLED NeoPixel alterations.
 *
 * You can find the original example here:
 * https://github.com/adafruit/Adafruit_NeoPixel/blob/master/examples/strandtest/strandtest.ino
 */

#include <FastLED.h>

#define DATA_PIN    12

#define LED_TYPE    WS2812B
#define COLOR_ORDER NEO_GRB + NEO_KHZ800



#define BRIGHTNESS          100


//========./assets/sunset.png======== - generated 1662472339006
 
const int seq_width = 30; // width of image sequence data
const int seq_height = 23; // height of image sequence data
const int seq_delay = 200; // delay in ms

CRGB leds[seq_width];

const int seq[23][30] PROGMEM = {{0,1,2,3,4,5,6,7,8,9,10,11,11,12,13,14,13,12,11,11,10,9,15,7,6,16,4,3,2,1},{17,18,3,19,5,20,21,22,23,11,12,24,25,26,27,28,27,26,25,29,12,11,23,30,21,20,5,19,3,18},{31,32,33,16,34,21,22,10,11,29,35,36,37,38,39,40,39,38,37,36,41,42,11,10,22,21,6,16,43,32},{2,44,45,6,7,22,46,11,47,48,49,50,51,52,53,54,53,52,55,50,56,28,47,11,10,22,7,57,45,44},{32,19,5,58,8,23,59,47,60,38,55,53,61,62,63,63,63,62,61,53,64,38,65,47,11,23,8,58,5,19},{44,45,6,21,9,11,24,66,67,68,69,70,71,72,73,73,73,72,71,70,69,74,38,48,29,11,9,21,6,45},{75,5,58,30,10,13,76,77,51,78,79,80,81,82,83,84,85,86,87,88,89,69,55,90,76,91,10,8,58,5},{92,57,21,9,11,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,98,84,54,108,109,93,11,22,7,57},{110,35,15,23,11,41,77,111,97,98,112,113,114,114,114,115,116,117,118,101,119,120,121,68,90,41,11,23,15,6},{122,123,44,124,14,28,39,53,125,107,113,126,116,127,128,129,130,127,115,126,101,131,132,53,133,27,13,10,15,134},{122,122,123,57,135,36,95,69,136,100,137,138,139,140,114,114,114,141,142,116,143,144,136,145,108,60,146,147,148,0},{149,150,151,152,153,11,12,154,154,154,136,155,156,157,114,114,114,114,158,155,159,136,136,160,161,11,21,16,148,162},{163,164,150,150,165,166,153,153,167,168,154,136,136,136,157,157,157,157,136,136,136,154,154,169,153,170,171,162,162,172},{163,150,150,163,173,122,174,162,153,175,176,177,154,154,154,136,136,154,154,177,177,168,178,179,180,162,162,122,181,182},{183,184,150,163,185,185,186,162,187,180,180,153,188,177,189,190,191,177,153,153,153,180,180,122,192,193,186,194,195,172},{150,150,151,196,197,197,198,199,200,162,162,187,180,153,201,202,203,204,205,180,162,206,122,207,208,150,150,209,150,150},{150,150,150,150,210,211,165,212,213,214,172,162,215,216,216,216,162,162,122,217,122,218,219,220,172,150,150,221,172,150},{150,150,150,150,150,150,222,198,199,223,224,122,162,225,225,225,122,122,122,226,227,228,229,229,230,150,150,172,150,150},{150,150,150,150,150,150,150,150,212,213,231,212,232,233,234,234,234,235,236,237,122,150,173,173,150,238,150,150,150,150},{150,150,150,150,150,150,150,150,198,239,223,240,241,242,243,244,244,245,246,172,172,172,150,150,172,213,150,150,150,150},{150,150,150,150,150,150,150,150,150,150,247,247,248,249,172,172,250,172,172,172,251,252,247,150,150,150,150,150,150,150},{150,150,150,150,150,150,150,150,150,150,150,150,163,163,172,172,195,172,163,150,163,150,150,150,150,150,150,150,150,150},{150,150,150,150,150,150,150,150,150,150,150,150,150,150,198,198,253,198,198,150,150,150,150,150,150,150,150,150,150,150}};
const int pallette[254] PROGMEM = {0xDF6888,0xE26988,0xE66A88,0xE96A87,0xEE6B87,0xF16D87,0xF36D87,0xF76E87,0xFA6E86,0xFC7086,0xFF7086,0xFF7186,0xFF7286,0xFF7387,0xFF7487,0xF96E87,0xF06C87,0xE16988,0xE56A88,0xED6B87,0xF56D87,0xF86E87,0xFB7086,0xFE7086,0xFF7887,0xFF7D89,0xFF8189,0xFF8389,0xFF8489,0xFF7787,0xFA7086,0xE46988,0xE86A88,0xEC6B87,0xF46D87,0xFF8089,0xFF878A,0xFF8D8B,0xFF928D,0xFF958D,0xFF968D,0xFF7F89,0xFF7687,0xEB6B87,0xEA6B87,0xEF6B87,0xFF7C88,0xFF7B88,0xFF858A,0xFF8F8B,0xFF978E,0xFF9F90,0xFFA490,0xFFAB91,0xFFAC90,0xFF9E8F,0xFF8E8B,0xF26D87,0xF66E87,0xFF8F8A,0xFF868A,0xFFDE98,0xFFDE99,0xFFDE9A,0xFF9D8F,0xFF8689,0xFF8589,0xFF938D,0xFFA190,0xFFAF92,0xFFDF9B,0xFFDF9D,0xFFE09E,0xFFE09F,0xFFA090,0xF37588,0xFF8188,0xFF908C,0xFFBC98,0xFFEFB4,0xFFEEB6,0xFFE4A7,0xFFF1C0,0xFFF1C1,0xFFE3A5,0xFFE3A4,0xFFE2A4,0xFFE9B1,0xFFE8AE,0xFFE8AA,0xFF8F8C,0xFF7287,0xF67789,0xFF7A88,0xFF898A,0xFF998E,0xFFAD91,0xFFEFB6,0xFFF0BD,0xFFF2C2,0xFFF3C7,0xFFF5CB,0xFFF5CD,0xFFF6CE,0xFFF6CD,0xFFFCF3,0xFFFBF2,0xFFF2C3,0xFF988E,0xFF888A,0xF87988,0xFFA28F,0xFFF3C4,0xFFF5CA,0xFFFDFF,0xFFF9DA,0xFFF9D9,0xFFF8D5,0xFFF7D1,0xFFF3C5,0xFFF1BE,0xFFEFB7,0x006797,0x1C9192,0xFF8D8A,0xFFF0BB,0xFFF7D2,0xFFFBE0,0xFFFCE4,0xFFFCE6,0xFFFCE5,0xFFF2C4,0xFFF0BC,0xFF948D,0xF87487,0xFA6F86,0xFFD995,0xFFF6CF,0xFFF9D8,0xFFFBE1,0xFFFCE7,0xFFFCE8,0xFFFBE2,0xFFF6D0,0xFFF3C8,0xFFAF91,0xFF7587,0xFF8889,0xE76A88,0x003672,0x0D0541,0x001854,0x3A8290,0xC9638A,0xFFB38D,0xFFEAAC,0xFFEBAD,0xFFEBB3,0xFFEBAE,0xFFEAAA,0xFFB192,0xFF9A8E,0x009D95,0x002660,0x0C0642,0x002965,0x825385,0xFF7684,0xFF7983,0xFF7484,0xFF958B,0xFF948B,0x003975,0x0D0642,0x00316C,0xFF9A89,0xFF7A83,0xFF7B83,0xFF978A,0xC4738A,0xA5B687,0x005B8F,0x00558B,0x001652,0x001855,0x001753,0x060C49,0x58AF8C,0xFA7684,0xBBE7F5,0xD4EEF3,0xB6E7F5,0x006697,0x050D4A,0x00568C,0x005188,0x001A57,0x090B48,0x002B67,0x002E6A,0x008397,0x74D1FF,0x77D2FF,0x72D1FF,0x59C1F7,0x98B588,0x1DAC8E,0x006395,0x005E91,0x00356D,0x060E4A,0x002863,0x002C68,0x00306B,0x004680,0x10B0FA,0x38BAFF,0x006B97,0x006495,0x005F92,0x00205C,0x002D68,0x031C59,0x00326D,0x006294,0x00A5F9,0x006596,0x006093,0x00467E,0x00134F,0x003871,0x00336E,0x005D91,0x005E9B,0x008BD9,0x0088D4,0x0082CA,0x007CC0,0x041B56,0x040E4B,0x00346F,0x00437E,0x004E86,0x00598E,0x0082C8,0x007FC4,0x007ABD,0x001C59,0x003671,0x003874,0x004C84,0x002C67,0x0A0946,0x00437C};
/* Declare the NeoPixel strip object:
*     * Argument 1 = Number of LEDs in the LED strip
*     * Argument 2 = Arduino pin number
*     * Argument 3 = LED strip color order
*
* The FastLED_NeoPixel version uses template arguments instead of function
* arguments. Note the use of '<>' brackets!
*
* You can switch between libraries by commenting out one of these two objects.
* In this example they should behave identically.
*/
// Adafruit_NeoPixel strip(NUM_LEDS, DATA_PIN, NEO_GRB);  // <- Adafruit NeoPixel version

void setup() {
  delay(3000); // 3 second delay for recovery
  FastLED.addLeds<LED_TYPE, DATA_PIN, GRB>(leds, seq_width);
//  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, seq_width);
  FastLED.setBrightness(BRIGHTNESS);

  blank(100);
}

void loop() {
	
  for (byte row = 0; row < seq_height; row++) {
    for (byte col= 0; col< seq_width; col++) {
      // lookup from prog mem
      int pixelBuffer = pgm_read_byte(&(seq[row][col]));
      int colorBuffer = pgm_read_byte(&(pallette[pixelBuffer]));
      
      leds[col] = colorBuffer;
      
    }
    FastLED.show();  
    delay(seq_delay);
	}
	blank(1000);
}





/*
* Blanks the LEDs and waits for a short time.
*/
void blank(unsigned long wait) {
	for (byte col= 0; col< seq_width; col++) {
      
      leds[col] = 0x000000;
      
    }
    FastLED.show();  
	delay(wait);
}
